import { assert } from 'chai';
import crypto from 'crypto';
const bigint = require('bigint-buffer');
const bigInt = require('big-integer');

import { genA, getk, getS } from './srp';
import params, { hexToBigInt } from './srpParams';

describe('SRP methods', () => {
  describe('genA', () => {
    it('should return a hex num', () => {
      const randa = Buffer.alloc(32);
      crypto.randomFillSync(randa, 0, 32);

      const result = genA(params['2048'], randa);
      console.log(result);
    });
  });

  describe('getS', () => {
    it('should compute S correctly.', () => {
      const a_num = bigInt('45873659922612332313507173713043621899458142697424133141465876071684443944555');
      const a_bytes = Buffer.from('656b9247651c925afd33a2516f5e22adab7e01175cb708c289e369a5fcd3366b', 'hex');
      const B_num = bigInt('189262083140545621011029173565252992825161902861648496362848907250434626639347677891537815985676137224284268166784338264945112031597853565329097506663026883447823907025757364004756750139809610900860797117180439941012054132123330200714595424665762276709372813089917600850419153736186336599587502384042833427784072724643827742125465873452161677092653881802708905609891989523156821715104563686142321387155421476522531188389213060357788094335695267178974785310875290473761386542262679235203887581322265379034646645724671356724107541640585239324550053406702516132444052929649213406113148556155512251798936521051123961244');
      const B_bytes = Buffer.from('17fce7ca5073e44d84c97a6f87b42ee27fd60e370db320f54561dab8530375a522884ea2a658f4fc853eb323a37e59134296cd364163fc26ec8753159c109b596aab0c3b22ae143ae3f69fad8974f26dc9beec7da13cbf19a0a4d1ef8e511940ab8454610b5247eb97ac298d34fbc77a346f0232e7b1d2f7cf10a38fbb479dbed1e1e3e0cb0563b4113a0412fbc393c470e422c9664ea11faf0cc467a323ff5a218e30ac67686ae8b948e9978075cb45814c3aea1da8c7815ca1b5c03122d58f5e4d6a1b1fd955d6884ccdf6ccdd8c1ece0fbd12adfa173a42d067211c3639b0ca45da7ae18d562563a5e5763c1bf9ad4aa1ae301857a9c8df6a9b1a9834d9c', 'hex');
      const g_num = bigInt('2');
      const k_num = bigInt('34704849670668482647683711281700631885066964767156528400561350050202374645357');
      const k_bytes = Buffer.from('4cba3fb2923e01fb263ddbbb185a01c131c638f2561942e437727e02ca3c266d', 'hex');
      const u_num = bigInt('81554261337474058544831831302589800802913444197173368183958827715210115815516');
      const u_bytes = Buffer.from('b44e137dad625179911f58320e98d8f2c2e26e0cc33c9325da59adc326bc185c', 'hex');
      const x_num = bigInt('96605723904677435393267606990100471890538533552084954682939862203822092241454');
      const x_bytes = Buffer.from('d594e6ecfd080b05719a3d456b6a0584b38d2236a807ec2a74358afb07d6ca2e', 'hex');
      // const S_num = bigInt('873664438876151141993728424567375209300224023025237208559968341068583094892731423853998447739648964218026690615260900342049159245646608164615098676249355097217069922171049182558305163008638017272778897056926176171197508679338761499836743870084397576760609220283185052062846361992931820502364618864275201230395850722129072436714935638465321971055685123003942251955645456947685942773690131992562558336858074599718594827313384509866922592821817161352747485189486402738174962278916641431079698536628752013617065470543659760686369339804267927990329015160434899002040279699184962929267375083996349169453227543694817911009');
      const N_num = bigInt('21766174458617435773191008891802753781907668374255538511144643224689886235383840957210909013086056401571399717235807266581649606472148410291413364152197364477180887395655483738115072677402235101762521901569820740293149529620419333266262073471054548368736039519702486226506248861060256971802984953561121442680157668000761429988222457090413873973970171927093992114751765168063614761119615476233422096442783117971236371647333871414335895773474667308967050807005509320424799678417036867928316761272274230314067548291133582479583061439577559347101961771406173684378522703483495337037655006751328447510550299250924469288819');

      // const result = getS(
      //   params['2048'],
      //   k_bytes,
      //   x_bytes,
      //   a_bytes,
      //   B_bytes,
      //   u_bytes,
      // );

      // console.log('S: ', bigint.toBigIntBE(Buffer.from(result, 'hex')))
      const base = B_num.subtract(k_num.multiply(g_num.modPow(x_num, N_num)));
      console.log('Base: ', base);
      const power = a_num.add(u_num.multiply(x_num));
      console.log('power: ', power);
      const S_num = base.modPow(power, N_num);
      console.log('S_num: ', S_num);

      const euclideanModPow = (a, b, m) => {
        var x = bigInt(a).modPow(b, m);
        return x.isNegative() ? x.add(m) : x;
      }

      console.log('S num euclidean: ', euclideanModPow(base, power, N_num));
    });
  });
  
  describe('getk', () => {
    it('should return k correctly.', () => {
      const result = getk(params['2048']);
      console.log(Buffer.from(result, 'hex').toString('base64'));
    });
  });
});
